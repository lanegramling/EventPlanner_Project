Team Wubba Lubba Dub Dub
Our plan to tackle this awful text file format

OLD FORMAT - Always 197 Lines Per event......
-----------------------------

CREATOR NAME
EVENT NAME
MONTH
DAY
YEAR
Selected?
Timeslot 12h
Timeslot 24h (00:00-00:30)
Attendees
.
.
.
Selected?
Timeslot 12h
Timeslot 24h (23:30-00:00)
Attendees

------------------------------


NEW FORMAT !!! USERNAMES ARE CASE SENSITIVE !!!
------------------------------

First File: EVENTS (just like our event table...........)
5 lines per event...

Number of events (iterator)
CREATOR NAME
EVENT NAME
EVENT ID
Day String "MM-DD-YYYY"
Timeslot string e.g. "0,1,2,5,7,21"
INT Number of attendees (n)
List of Attendees - QString Split on Commas e.g. "Lane,Dustin,Damian..."
0th Attendee's timeslot availability e.g. "0,1,2,3,5,6,7"
.
.
.
Nth Attendee's timeslot availability e.g. "0,1,2,3,4,11,12,13"


------------------------------

NEW FORMAT WITH UPDATED REQUIREMENTS
------------------------------

First File: EVENTS (just like our event table...........)

Number of events (iterator)
CREATOR NAME
EVENT NAME
EVENT ID
Day String "MM-DD-YYYY,MM-DD-YYYY, ... , MM-DD-YYYY" 
Timeslot string e.g. "0,1,2,5,7,21"
Task List String "chips,drinks,booze"
INT Number of attendees (n)
List of Attendees - QString Split on Commas e.g. "Lane,Dustin,Damian..."
0th Attendee's timeslot/task availability e.g. "0,1,2,3,5,6,7;bring chips,bring water" removeOne() function for tasks
.
.
.
Nth Attendee's timeslot/task availability e.g. "0,1,2,3,4,11,12,13;bring booze"



------------------------------









Scenario

October 7th 2017 - 12:00am-5:00am 0-9

Push date 10-7-2017 an QStringList (0)
Push timeslots 0,1,2,3...9 into QList by doing (48 * index) + timeslot FOR EACH TIMESLOT

If we push any others after the first



October 8th 2017 - 3:00am-6:00am 6-11

Get index of 10-8-2017 in QList if index = -1, then push 10-8-2017 into list. Index of this day will be 1
Push these timeslots (48*index) + timeslot into QList of ints 54,55,56,




dummy method

QStringList getTimeStrings(QStringList days, QList<int> timeslots, bool format) { // TIMESLOTS SHOULD BE SORTED
	
	Each string in the list returned

	QStringList outputList;

	int count = 0;

	foreach (QString day, days) {
		QString output = day + ": ";

		QList<int> currentDaySlots;

		bool workingDay = false;

		foreach (int slot, timeslots) {

			if (slot / 48 == count) { 
				currentDaySlots.append(slot - (48*count));
				workingDay = true;
			} else if (workingDay) {
				break;
			}
		}

		output = output + helpermethods::getTimeString(currentDaySlots, format);

		outputList.append(output)

		count++;
	}

	return outputList;

}


list of ints = 0,1,2,3,4,55,56,57,101,102,103,...  !!! MUST BE SORTED !!!
count = 1





TASKS TO DO WHEN UPGRADING TO MULTI-DAY

Event Class:
Private Date variable will now be private List of Date strings





We forgot to think about sorting the days... Can we do it after instead of reformatting the code?

define a function to say if a date string is < another? (they will never be equal. if they are then we fucked up somewhere)

FORMAT of dates to be compared
date1 = "10-7-2015: 3:00am-4:00am, 5:30pm-10:00pm"
date2 = "10-20-2015: 4:00am-12:00am"

so we need to split the list first on the ':''

bool compareDate(QString date1, QString date2) { // Return true if date1 is PRIOR to date2

	QString date1sub = date1.split(':')[0];
	QString date2sub = date2.split(':')[0];	

	QStringList date1split = date1sub.split('-');
	QStringList date2split = date2sub.split('-');

	int date1month = date1split[0].toInt();
	int date1day = date1split[1].toInt();
	int date1year = date1split[2].toInt();

	int date2month = date2split[0].toInt();
	int date2day = date2split[1].toInt();
	int date2year = date2split[2].toInt();

	if (date1year == date2year) {
		if (date1month == date2month) {
			return (date1day < date2day);
		} else {
			return (date1month < date2month);
		}
	} else {
		return (date1year < date2year);
	}
}



EVENT:
Timeslots: 0,1,2,3
Tasks: QStringList = "chips","drinks","dog"
Attendee:
NONE

Event:
Timeslots: 0,1,2,3
Tasks: QStringList = "drinks"

Attendee:
Dustin: (avail;tasks) = "0,2;chips,dog"






How do we sort a list of dates if we still "don't care" how we record them initially

Option (a) ALWAYS keep it sorted... (that means refactoring... but we haven't even factored yet in the first place lol)
	Pros:
		Never have to worry about it after tediously doing it the first time

	Cons:
		Potentially more memory usage (not that concerning i guess)
		Refactor original thoughts
		CANT DO "ADD PREVIOUS DAY'S TIMESLOTS" (except actually we can with the normal method? OR we can do a little more work and still make it happen...)

Option (b) Sort it after event has been created.
	Pros:
		Don't have to change our original thoughts
		With our original thoughts/constraints it will work the best memory wise
	Cons:
		Probably not the best way to do it


Compromise:

We HAVE To keep it sorted always. This will make it easier to keep track of, and also easier than sorting the whole list. We just need to find the right spot to place the date. If we can insert at an index then this is easy and we just have to refactor the list of ints...

We can insert at an index, so as long as we compare the dates okay then we're good.
The other thing is we should do a QList< QList<int> > in order to keep track of the timeslots initially.